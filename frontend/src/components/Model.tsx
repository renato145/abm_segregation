/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { TAgentType } from "engine-wasm";

type GLTFResult = GLTF & {
  nodes: {
    Body1: THREE.Mesh;
    Head1: THREE.Mesh;
    ArmLeft1: THREE.Mesh;
    ArmRight1: THREE.Mesh;
    LegLeft1: THREE.Mesh;
    LegRight1: THREE.Mesh;
  };
  materials: {
    lambert1: THREE.MeshStandardMaterial;
  };
};

const ModelLocation: Record<TAgentType[0], string> = {
  Man1: "man1.gltf",
  Man2: "man2.gltf",
};

const ModelColor: Record<TAgentType[0], THREE.MeshStandardMaterial> = {
  Man1: new THREE.MeshStandardMaterial({ color: "#cc0000" }),
  Man2: new THREE.MeshStandardMaterial({ color: "#00cc00" }),
};

type Props = {
  modelType: keyof typeof ModelLocation;
  isHappy: boolean;
} & JSX.IntrinsicElements["group"];

export const Model = ({ modelType, isHappy, ...props }: Props) => {
  const group = useRef<THREE.Group>();
  const { nodes } = useGLTF(ModelLocation[modelType]) as GLTFResult;
  const colorMaterial = useMemo(() => {
    return isHappy ? null : ModelColor[modelType];
  }, [isHappy, modelType]);

  return (
    <group ref={group} {...props} dispose={null} castShadow>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Body1.geometry}
        material={colorMaterial ?? nodes.Body1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Head1.geometry}
        material={colorMaterial ?? nodes.Head1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ArmLeft1.geometry}
        material={colorMaterial ?? nodes.ArmLeft1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ArmRight1.geometry}
        material={colorMaterial ?? nodes.ArmRight1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.LegLeft1.geometry}
        material={colorMaterial ?? nodes.LegLeft1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.LegRight1.geometry}
        material={colorMaterial ?? nodes.LegRight1.material}
      />
    </group>
  );
};

useGLTF.preload(ModelLocation["Man1"]);
useGLTF.preload(ModelLocation["Man2"]);
